USE expense_sharing_app;

-- Create User table
CREATE TABLE User (
    UserID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,  -- Stores hashed passwords
    Phone VARCHAR(15),
    JoinDate DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Create Group table
CREATE TABLE `Group` (
    GroupID INT AUTO_INCREMENT PRIMARY KEY,
    GroupName VARCHAR(100) NOT NULL,
    Description TEXT,
    CreationDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    InviteCode VARCHAR(20) UNIQUE NOT NULL,
    CreatedByUserID INT NOT NULL,
    FOREIGN KEY (CreatedByUserID) REFERENCES User(UserID)
);

-- Create GroupMember table
CREATE TABLE GroupMember (
    UserID INT NOT NULL,
    GroupID INT NOT NULL,
    IsAdmin BOOLEAN DEFAULT FALSE,
    JoinDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (UserID, GroupID),
    FOREIGN KEY (UserID) REFERENCES User(UserID) ON DELETE CASCADE,
    FOREIGN KEY (GroupID) REFERENCES `Group`(GroupID) ON DELETE CASCADE
);

-- Create Expense table
CREATE TABLE Expense (
    ExpenseID INT AUTO_INCREMENT PRIMARY KEY,
    GroupID INT NOT NULL,
    PaidByUserID INT NOT NULL,
    Amount DECIMAL(10,2) NOT NULL,
    Description VARCHAR(255) NOT NULL,
    Date DATETIME DEFAULT CURRENT_TIMESTAMP,
    IsSettled BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (GroupID) REFERENCES `Group`(GroupID) ON DELETE CASCADE,
    FOREIGN KEY (PaidByUserID) REFERENCES User(UserID)
);

-- Create Settlement table
CREATE TABLE Settlement (
    SettlementID INT AUTO_INCREMENT PRIMARY KEY,
    GroupID INT NOT NULL,
    PayerUserID INT NOT NULL,
    ReceiverUserID INT NOT NULL,
    Amount DECIMAL(10,2) NOT NULL,
    Date DATETIME DEFAULT CURRENT_TIMESTAMP,
    Status ENUM('Pending', 'Confirmed') DEFAULT 'Pending',
    PaymentMethod VARCHAR(50),
    FOREIGN KEY (GroupID) REFERENCES `Group`(GroupID) ON DELETE CASCADE,
    FOREIGN KEY (PayerUserID) REFERENCES User(UserID),
    FOREIGN KEY (ReceiverUserID) REFERENCES User(UserID)
);

-- Create Invitation table
CREATE TABLE Invitation (
    InvitationID INT AUTO_INCREMENT PRIMARY KEY,
    GroupID INT NOT NULL,
    SenderUserID INT NOT NULL,
    RecipientEmail VARCHAR(100) NOT NULL,
    Status ENUM('Pending', 'Accepted', 'Rejected') DEFAULT 'Pending',
    InvitationDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    ExpiryDate DATETIME,
    FOREIGN KEY (GroupID) REFERENCES `Group`(GroupID) ON DELETE CASCADE,
    FOREIGN KEY (SenderUserID) REFERENCES User(UserID)
);

-- Sample data for User table
INSERT INTO User (Name, Email, Password, Phone, JoinDate) VALUES
('Aryan Singh', 'aryan.singh@gmail.com', 'hashed_password_123', '9876543210', '2024-12-15 14:30:00'),
('Priya Sharma', 'priya.sharma@gmail.com', 'hashed_password_456', '8765432109', '2024-12-16 10:45:00'),
('Rahul Kumar', 'rahul.kumar@gmail.com', 'hashed_password_789', '7654321098', '2024-12-17 12:15:00'),
('Neha Patel', 'neha.patel@gmail.com', 'hashed_password_101', '6543210987', '2024-12-18 09:30:00'),
('Vikram Malhotra', 'vikram.malhotra@gmail.com', 'hashed_password_112', '5432109876', '2024-12-19 16:20:00');

-- Sample data for Group table
INSERT INTO `Group` (GroupName, Description, CreationDate, InviteCode, CreatedByUserID) VALUES
('Hostel Room 301', 'Group for roommates of Hostel 301', '2025-01-01 08:00:00', 'HR301XYZ', 1),
('Trip to Goa', 'Expenses for our Goa vacation', '2025-01-05 09:15:00', 'GOATRIP2025', 2),
('Flat 42B', 'Shared apartment expenses', '2025-01-10 11:30:00', 'FLAT42B', 3),
('Project Team Alpha', 'Team lunch and supplies', '2025-01-15 13:45:00', 'TEAMALPHA', 4),
('Family Expenses', 'Shared family budget', '2025-01-20 15:00:00', 'FAMILY2025', 5);

-- Sample data for GroupMember table
INSERT INTO GroupMember (UserID, GroupID, IsAdmin, JoinDate) VALUES
(1, 1, TRUE, '2025-01-01 08:00:00'),
(2, 1, FALSE, '2025-01-01 08:30:00'),
(3, 1, FALSE, '2025-01-01 09:00:00'),
(1, 2, FALSE, '2025-01-05 09:30:00'),
(2, 2, TRUE, '2025-01-05 09:15:00');

-- Create indexes for better performance
CREATE INDEX idx_expense_group ON Expense(GroupID);
CREATE INDEX idx_expense_user ON Expense(PaidByUserID);
CREATE INDEX idx_settlement_group ON Settlement(GroupID);
CREATE INDEX idx_settlement_payer ON Settlement(PayerUserID);
CREATE INDEX idx_settlement_receiver ON Settlement(ReceiverUserID);
CREATE INDEX idx_invitation_group ON Invitation(GroupID);
CREATE INDEX idx_invitation_sender ON Invitation(SenderUserID);
CREATE INDEX idx_invitation_recipient ON Invitation(RecipientEmail);
