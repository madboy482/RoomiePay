-- Create the database;
CREATE DATABASE RoomiePayDB;

-- Use the database
USE RoomiePayDB;

-- Create Users table
CREATE TABLE Users (
    UserID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Password TEXT NOT NULL,
    Phone VARCHAR(15),
    JoinDate DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Create Groups table
CREATE TABLE UserGroups (
    GroupID INT AUTO_INCREMENT PRIMARY KEY,
    GroupName VARCHAR(100) NOT NULL,
    Description TEXT,
    CreationDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    InviteCode VARCHAR(20) UNIQUE NOT NULL,
    CreatedByUserID INT NOT NULL,
    FOREIGN KEY (CreatedByUserID) REFERENCES Users(UserID) ON DELETE CASCADE
);

-- Create GroupMembers table
CREATE TABLE GroupMembers (
    UserID INT NOT NULL,
    GroupID INT NOT NULL,
    IsAdmin BOOLEAN NOT NULL DEFAULT FALSE,
    PRIMARY KEY (UserID, GroupID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (GroupID) REFERENCES UserGroups(GroupID) ON DELETE CASCADE
);

-- Create Expenses table
CREATE TABLE Expenses (
    ExpenseID INT AUTO_INCREMENT PRIMARY KEY,
    GroupID INT NOT NULL,
    PaidByUserID INT NOT NULL,
    Amount DECIMAL(10,2) NOT NULL CHECK (Amount > 0),
    Description VARCHAR(255) NOT NULL,
    Date DATETIME DEFAULT CURRENT_TIMESTAMP,
    IsSettled BOOLEAN NOT NULL DEFAULT FALSE,
    FOREIGN KEY (GroupID) REFERENCES UserGroups(GroupID) ON DELETE CASCADE,
    FOREIGN KEY (PaidByUserID) REFERENCES Users(UserID) ON DELETE CASCADE
);

-- Create Settlements table
CREATE TABLE Settlements (
    SettlementID INT AUTO_INCREMENT PRIMARY KEY,
    GroupID INT NOT NULL,
    PayerUserID INT NOT NULL,
    ReceiverUserID INT NOT NULL,
    Amount DECIMAL(10,2) NOT NULL CHECK (Amount > 0),
    Date DATETIME DEFAULT CURRENT_TIMESTAMP,
    Status ENUM('Pending', 'Confirmed') DEFAULT 'Pending',
    PaymentMethod VARCHAR(50),
    FOREIGN KEY (GroupID) REFERENCES UserGroups(GroupID) ON DELETE CASCADE,
    FOREIGN KEY (PayerUserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (ReceiverUserID) REFERENCES Users(UserID) ON DELETE CASCADE
);

-- Add DueDate column to Settlements table
ALTER TABLE Settlements ADD COLUMN DueDate DATETIME;

-- Create Invitations table
CREATE TABLE Invitations (
    InvitationID INT AUTO_INCREMENT PRIMARY KEY,
    GroupID INT NOT NULL,
    SenderUserID INT NOT NULL,
    RecipientEmail VARCHAR(100) NOT NULL,
    Status ENUM('Pending', 'Accepted', 'Rejected') DEFAULT 'Pending',
    InvitationDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    ExpiryDate DATETIME,
    FOREIGN KEY (GroupID) REFERENCES UserGroups(GroupID) ON DELETE CASCADE,
    FOREIGN KEY (SenderUserID) REFERENCES Users(UserID) ON DELETE CASCADE
);

-- Create Notifications table
CREATE TABLE IF NOT EXISTS Notifications (
    NotificationID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT NOT NULL,
    Message TEXT NOT NULL,
    Type VARCHAR(50) NOT NULL,
    IsRead BOOLEAN DEFAULT FALSE,
    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);

-- Create SettlementPeriods table
CREATE TABLE IF NOT EXISTS SettlementPeriods (
    GroupID INT PRIMARY KEY,
    Period VARCHAR(10) NOT NULL,
    LastSettlement DATETIME,
    NextSettlement DATETIME,
    FOREIGN KEY (GroupID) REFERENCES UserGroups(GroupID) ON DELETE CASCADE
);

-- Insert sample Users
INSERT INTO Users (UserID, Name, Email, Password, Phone, JoinDate) VALUES
(1, 'Aryan Singh', 'aryan@gmail.com', 'pwd123', '9876543210', '2025-01-01'),
(2, 'Priya Sharma', 'priya@gmail.com', 'pwd234', '9876543211', '2025-01-02'),
(3, 'Rahul Mehra', 'rahul@gmail.com', 'pwd345', '9876543212', '2025-01-03'),
(4, 'Neha Reddy', 'neha@gmail.com', 'pwd456', '9876543213', '2025-01-04'),
(5, 'Rohan Verma', 'rohan@gmail.com', 'pwd567', '9876543214', '2025-01-05'),
(6, 'Simran Kaur', 'simran@gmail.com', 'pwd678', '9876543215', '2025-01-06'),
(7, 'Ankit Jain', 'ankit@gmail.com', 'pwd789', '9876543216', '2025-01-07'),
(8, 'Ishita Roy', 'ishita@gmail.com', 'pwd890', '9876543217', '2025-01-08'),
(9, 'Vikram Das', 'vikram@gmail.com', 'pwd901', '9876543218', '2025-01-09'),
(10, 'Tanvi Joshi', 'tanvi@gmail.com', 'pwd012', '9876543219', '2025-01-10'),
(11, 'Harsh Vardhan', 'harsh@gmail.com', 'pwd013', '9876543220', '2025-01-11'),
(12, 'Megha Tiwari', 'megha@gmail.com', 'pwd014', '9876543221', '2025-01-12'),
(13, 'Aditya Rao', 'aditya@gmail.com', 'pwd015', '9876543222', '2025-01-13'),
(14, 'Kritika Bansal', 'kritika@gmail.com', 'pwd016', '9876543223', '2025-01-14'),
(15, 'Dev Patel', 'dev@gmail.com', 'pwd017', '9876543224', '2025-01-15');

-- Insert sample Groups
INSERT INTO UserGroups (GroupID, GroupName, Description, InviteCode, CreatedByUserID) VALUES
(1, 'Room 101', 'Flatmates sharing expenses', 'INV101', 1),
(2, 'Trip to Goa', 'Goa vacation group', 'GOA2025', 2),
(3, 'Startup Project', 'Shared SaaS hosting', 'SAASX1', 3),
(4, 'Room 202', 'Shared hostel room expenses', 'ROOM202', 4),
(5, 'Girls Hostel Block C', 'Shared supplies & bills', 'GIRLSC', 6),
(6, 'Manali Trip', 'Trip planning expenses', 'MANALI24', 7),
(7, 'PG Food Split', 'Food delivery and groceries', 'FOODPG', 5),
(8, 'Office Team Lunches', 'Splitting office snacks/lunches', 'OFFLUNCH', 8),
(9, 'Home Repairs', 'Parent/children house work split', 'HOMEREP', 9),
(10, 'Exam Time Snacks', 'Tea and midnight Maggie', 'EXAMFUEL', 10),
(11, 'Internship Expenses', 'Shared cab & metro costs', 'INTERN25', 11),
(12, 'Birthday Pool', 'Pool funds for birthdays', 'BDAYPOOL', 12),
(13, 'Netflix Sharing', 'Streaming cost split', 'NETSHARE', 13),
(14, 'Flat Deposit Return', 'Security deposit calculation', 'FLATSEC', 14),
(15, 'Festival Celebrations', 'Decorations, sweets etc.', 'FEST2025', 15);

(8, 6, 7, 8000.00, 'Bus booking', '2025-01-31', TRUE),
(9, 7, 5, 650.00, 'Milk & Bread', '2025-02-03', FALSE),
(10, 8, 8, 1100.00, 'Pizza Party', '2025-02-01', TRUE),
(11, 9, 9, 4300.00, 'Plumbing fix', '2025-02-04', FALSE),
(12, 10, 10, 300.00, 'Chai & biscuits', '2025-02-01', FALSE),
(13, 11, 11, 950.00, 'Metro card recharge', '2025-02-02', TRUE),
(14, 12, 12, 1500.00, 'Cake and balloons', '2025-02-01', FALSE),
(15, 13, 13, 499.00, 'Netflix monthly', '2025-02-01', TRUE);

-- Insert sample Settlements
INSERT INTO Settlements (SettlementID, GroupID, PayerUserID, ReceiverUserID, Amount, Date, Status, PaymentMethod) VALUES
(1, 1, 2, 1, 600.00, '2025-02-10', 'Confirmed', 'UPI'),
(2, 1, 3, 1, 600.00, '2025-02-11', 'Confirmed', 'Bank Transfer'),
(3, 2, 4, 2, 1800.00, '2025-02-12', 'Pending', 'Cash'),
(4, 3, 6, 3, 1600.00, '2025-02-13', 'Confirmed', 'Google Pay'),
(5, 4, 8, 4, 750.00, '2025-02-14', 'Pending', 'Paytm'),
(6, 5, 10, 6, 200.00, '2025-02-15', 'Confirmed', 'PhonePe'),
(7, 6, 1, 7, 2666.66, '2025-02-16', 'Pending', 'UPI'),
(8, 7, 11, 5, 216.66, '2025-02-17', 'Confirmed', 'Cash'),
(9, 8, 10, 8, 550.00, '2025-02-18', 'Pending', 'Paytm'),
(10, 9, 12, 9, 1433.33, '2025-02-19', 'Confirmed', 'Bank Transfer'),
(11, 10, 14, 10, 100.00, '2025-02-20', 'Confirmed', 'NEFT'),
(12, 11, 11, 13, 300.00, '2025-02-20', 'Pending', 'UPI'),
(13, 12, 15, 12, 500.00, '2025-02-21', 'Confirmed', 'Cash'),
(14, 13, 14, 13, 166.00, '2025-02-22', 'Confirmed', 'Google Pay'),
(15, 14, 1, 14, 5000.00, '2025-02-23', 'Pending', 'Bank Transfer');

-- Insert sample Invitations
INSERT INTO Invitations (InvitationID, GroupID, SenderUserID, RecipientEmail, Status, InvitationDate, ExpiryDate) VALUES
(1, 1, 1, 'newroomie@gmail.com', 'Pending', '2025-01-20', '2025-01-27'),
(2, 2, 2, 'rohan.friend@gmail.com', 'Accepted', '2025-01-21', '2025-01-28'),
(3, 3, 3, 'techmate@gmail.com', 'Rejected', '2025-01-22', '2025-01-29'),
(4, 4, 4, 'hostelmate@gmail.com', 'Accepted', '2025-01-23', '2025-01-30'),
(5, 5, 6, 'hostelbuddy@gmail.com', 'Pending', '2025-01-24', '2025-01-31'),
(6, 6, 7, 'trekker@gmail.com', 'Accepted', '2025-01-25', '2025-02-01'),
(7, 7, 5, 'pgmate@gmail.com', 'Pending', '2025-01-26', '2025-02-02'),
(8, 8, 8, 'colleague@gmail.com', 'Rejected', '2025-01-27', '2025-02-03'),
(9, 9, 9, 'sister@gmail.com', 'Accepted', '2025-01-28', '2025-02-04'),
(10, 10, 10, 'studybuddy@gmail.com', 'Pending', '2025-01-29', '2025-02-05'),
(11, 11, 11, 'internpal@gmail.com', 'Accepted', '2025-01-30', '2025-02-06'),
(12, 12, 12, 'bdayplanner@gmail.com', 'Rejected', '2025-01-31', '2025-02-07'),
(13, 13, 13, 'binger@gmail.com', 'Accepted', '2025-02-01', '2025-02-08'),
(14, 14, 14, 'oldflatmate@gmail.com', 'Pending', '2025-02-02', '2025-02-09'),
(15, 15, 15, 'festivalpal@gmail.com', 'Accepted', '2025-02-03', '2025-02-10');

-- Create indexes for better performance
CREATE INDEX idx_expense_group ON Expenses(GroupID);
CREATE INDEX idx_expense_user ON Expenses(PaidByUserID);
CREATE INDEX idx_settlement_group ON Settlements(GroupID);
CREATE INDEX idx_settlement_payer ON Settlements(PayerUserID);
CREATE INDEX idx_settlement_receiver ON Settlements(ReceiverUserID);
CREATE INDEX idx_invitation_group ON Invitations(GroupID);
CREATE INDEX idx_invitation_sender ON Invitations(SenderUserID);
CREATE INDEX idx_invitation_recipient ON Invitations(RecipientEmail);

-- Query to verify data
SELECT * FROM Users;
SELECT * FROM UserGroups;
SELECT * FROM GroupMembers;
SELECT * FROM Expenses;
SELECT * FROM Settlements;
SELECT * FROM Invitations;



-- Normalization (for 2NF)
-- Step 1: Create new table for join dates
CREATE TABLE GroupMemberJoinDates (
    GroupID INT NOT NULL,
    user_id INT NOT NULL,
    joined_at DATETIME,
    PRIMARY KEY (GroupID, user_id),
    FOREIGN KEY (GroupID) REFERENCES UserGroups(GroupID) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES Users(UserID) ON DELETE CASCADE
);

-- Step 2: Migrate join date data from GroupMembers to GroupMemberJoinDates
INSERT INTO GroupMemberJoinDates (GroupID, user_id, joined_at)
SELECT GroupID, UserID, JoinDate
FROM GroupMembers;

-- Step 3: Drop the JoinDate column from GroupMembers
ALTER TABLE GroupMembers
DROP COLUMN JoinDate;

-- Step 4: Verify the updated table structures
DESCRIBE GroupMembers;
DESCRIBE GroupMemberJoinDates;






-- Start transaction to insert a new expense and corresponding settlement
START TRANSACTION;

-- Insert new expense: Bob (user 2) pays for group 1
INSERT INTO Expenses (GroupID, PaidByUserID, Amount, Description)
VALUES (1, 2, 1000.00, 'Electricity Bill');

-- Alice (user 1) owes 50% to Bob
INSERT INTO Settlements (ExpenseID, OwedByUserID, OwedToUserID, Amount, Status)
VALUES (LAST_INSERT_ID(), 1, 2, 500.00, 'Pending');

-- Commit transaction
COMMIT;

-- Optional rollback if you want to undo the above (normally you'd use either COMMIT or ROLLBACK, not both)
-- ROLLBACK;





-- Start transaction and lock a specific row to prevent concurrent updates 2nd [art]
START TRANSACTION;

-- Lock ExpenseID 5 to ensure no other transaction modifies it
SELECT * FROM Expenses WHERE ExpenseID = 5 FOR UPDATE;

-- Update the amount
UPDATE Expenses SET Amount = 1200.00 WHERE ExpenseID = 5;

-- Commit changes
COMMIT;






-- Set highest isolation level to prevent dirty reads and phantom reads 3rd
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

START TRANSACTION;

-- Check all pending settlements
SELECT * FROM Settlements WHERE Status = 'Pending';

-- Confirm a specific settlement
UPDATE Settlements SET Status = 'Confirmed' WHERE SettlementID = 3;

COMMIT;







-- Confirm a specific settlement 3a
CREATE TABLE RecoveryLogs (
    LogID INT AUTO_INCREMENT PRIMARY KEY,
    OperationType VARCHAR(50),
    TableName VARCHAR(50),
    PrimaryKeyAffected VARCHAR(100),
    OldValue TEXT,
    NewValue TEXT,
    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Confirm a specific settlement 3b
CREATE TABLE AuditTrail (
    AuditID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT,
    Action VARCHAR(100),
    AffectedTable VARCHAR(50),
    ChangeDescription TEXT,
    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- Log the update manually for recovery 4th
INSERT INTO RecoveryLogs (OperationType, TableName, PrimaryKeyAffected, OldValue, NewValue)
VALUES (
  'UPDATE', 
  'Expenses', 
  'ExpenseID=2', 
  '{"Amount":1000.00}', 
  '{"Amount":1200.00}'
);







-- Track user action for auditing 5th
INSERT INTO AuditTrail (UserID, Action, AffectedTable, ChangeDescription)
VALUES (
  2,
  'Updated Expense Amount',
  'Expenses',
  'Changed amount of ExpenseID=2 from 1000.00 to 1200.00'
);

